#include <bits/stdc++.h>
#define int long long
const int mod = 1e9+7;
using namespace std;
int f[15][15][1005];
int a[1005],cnt;
int dfs(bool limit, int pre1, int pre2, int pos){
	if(!pos) return 1;
	int &now = f[pre1][pre2][pos];
	if(!limit && pre1 < 10 && pre2 < 10 && now != -1) return now;
//	cout << pos << " " << a[pos] << endl;
	int up = limit ? a[pos] : 9;
	int res = 0;
//	cout << up << endl;
	for(int i = 0; i <= up; i++){
//		cout << i << endl;
		if(pre1 >= 10 && pre2 >= 10 && i == 0){
			res = (res +dfs(i == up && limit,10,10,pos-1)) % mod;
			continue;
		} 
//		cout << i << endl;
		if(i == pre1 || i == pre2) continue;
//		cout << pre1 << " " << pre2 << endl;
		res = (res + dfs(limit&&i==up,pre2,i,pos-1)) % mod;
	}  
	if(!limit && pre1 < 10 && pre2 < 10) now = res;
	return res;
}

signed main(){
	memset(f,-1,sizeof f);
	string s;
	cin >> s;
	int len = s.size();
	s = " " + s;
	int L = 0;
	for(int i = 1; i <= len; i++){
		a[len-i+1] = s[i] - '0';
		L = (L * 10 + s[i] - '0') % mod;
	}	 
	for(int i = 1; i <= len; i++){
		if(a[i] == 0) a[i] = 9;
		else{
			a[i]--;
			break;
		}
	}
	int l = dfs(1,10,10,len);
//	memset(f,-1,sizeof f);
	cin >> s;
	len = s.size();
	s = " " + s;
	int R = 0;
	for(int i = 1; i <= len; i++){
		a[len-i+1] = s[i] - '0';
		R = (R * 10 + s[i] - '0') % mod;
	}
//	for(int i = 1; i <= len; i++){
//		cout << a[i];
//	}
//	cout << endl;
	int r = dfs(1,10,10,len) % mod;
//	cout << R << " " << L << endl;
	cout << ((R-L+1 - r + l) % mod + mod)%mod;
	return 0;
}
/*


*/
